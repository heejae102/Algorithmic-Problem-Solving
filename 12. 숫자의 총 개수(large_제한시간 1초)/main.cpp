#include<stdio.h>
#include<iostream>
using namespace std; 

// 1차 복습 풀이시간 : 17분 (최초의 풀이보다 성능이 좋은 새로운 풀이법 발견)

/*

<12. 숫자의 총 개수(large : 제한시간 1초)>

자연수 N이 입력되면 1부터 N까지의 자연수를 종이에 적을 때,
각 숫자는 몇 개 쓰였을까요?

예를 들어 1부터 15까지는 1, 2, 3, 4, 5, 6, 7, 8, 9,
1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5으로
총 21개가 쓰였음을 알 수 있습니다.

자연수 N이 입력되면 1부터 N까지 각 숫자가
몇 개 사용되었는지를 구하는 프로그램을 작성하세요.

=============================================================================

▶ 입력설명
첫 번째 줄에는 자연수 N(3 <= N < 1,000,000,000)이 주어진다.

▶ 출력설명
첫 번째 줄에 숫자의 총개수를 출력한다.

=============================================================================

▶ 입력예제
15

▶ 출력예제
21

*/

int main()
{
	// 최초의 풀이1 (가장 느림)

	/*
	int n, count, sum = 0;

	cin >> n;

	// N(3 <= N < 1,000,000,000)
	// 즉 N의 최대값은 999,999,999로 9자리까지 가능 

	for (int i = 1; i <= n; i++)
	{
		count = 9;

		for (int j = 100000000; j >= 1; j /= 10)
		{
			if (i < j) count--;
			else
			{
				sum += count;
				break;
			}
		}
	}

	printf("%d\n", sum);
	*/

	// 새로운 풀이2 (1번보다 빠르고, 강의 풀이보다는 조금 느리다.)

	int n, sum = 0, digitCount = 1;

	cin >> n; 

	for (int i = 1, k = 10; i <= n; i++)
	{
		if (i >= k)
		{
			k *= 10;
			digitCount++;
		}

		sum += digitCount;
	}

	cout << sum << endl; 

	//============================================================================// 

	// 강의 풀이 (가장 빠름. 하지만 가독성이 너무 떨어져서 디버깅이 어려움.)

	/*
	// c : 자릿수 
	// d : 숫자 개수 
	int n, sum = 0, res = 0, c = 1, d = 9;

	cin >> n;

	while (sum + d < n)
	{
		res += (c * d);
		sum += d; 
		
		c++;		// 자릿수 올리기 
		d *= 10;	// 자릿수에 따른 숫자 개수 증가 (9, 90, 900, 9000. . .)
	}

	res += (n - sum) * c;
	printf("%d\n", res);
	*/

	return 0;
}