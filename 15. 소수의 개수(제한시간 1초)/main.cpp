#include<stdio.h>
#include<iostream>
using namespace std; 

// 1차 복습 풀이시간 : 9분 (강의 풀이는 복습 필요)
// 2차 복습 풀이시간 : 6분 30초 이내 

/*

<15. 소수의 개수(제한시간 1초)>

자연수 N이 입력되면 1부터 N까지의 
소수의 개수를 출력하는 프로그램을 작성하세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

만약 20이 입력되면 1부터 20까지의 소수는 
2, 3, 5, 7, 11, 13, 17, 19로 총 8개입니다.

제한시간은 1초입니다.

=============================================================================

▶ 입력설명
첫 줄에 자연수 N(2 <= N <= 200,000)이 주어집니다.

▶ 출력설명
첫 줄에 소수의 개수를 출력합니다.

=============================================================================

▶ 입력예제
20

▶ 출력예제
8

*/

int main()
{
	// 최초의 풀이 (강의풀이보다 성능이 좋음. 프로그래머스 참고) 

	/*
	int n, count = 0;
	int num[200001] = { 0 };

	cin >> n;

	// 첫 줄에 자연수 N(2 <= N <= 200,000)이 주어집니다.

	// 1은 소수가 아니므로 건너뛰고 2부터 시작  
	for (int i = 2; i <= n; i++)
	{
		// -1이 대입된 원소(어떠한 숫자의 배수)는 건너뛰기 
		if (num[i] == -1) continue;

		// 특정 숫자의 배수가 아닌 경우(소수)에만 count++ 
		count++;

		// 특정 숫자의 배수가 아닌 숫자가 들어오고, 해당 수의 배수에 전부 -1 대입
		for (int j = i; j <= n; j += i)
		{
			num[j] = -1;
		}
	}

	printf("%d\n", count);
	*/

	//============================================================================// 

	// 강의 풀이 

	int n, squareRoot, count = 0;

	cin >> n;

	for (int i = 2; i <= n; i++)
	{
		count++;

		squareRoot = (int)sqrt(i);

		// 제곱근은 수의 경계가 되기 때문에, (제곱근을 기준으로 같은 수를 검사)
		// 2부터 sqrt(num)까지의 루프만 반복해도 소수 개수 판별 가능 
		for (int j = 2; j <= squareRoot; j++)
		{
			if (i % j == 0)
			{
				count--;
				break;
			}
		}
	}

	printf("%d\n", count);

	return 0;
}