#include<iostream>
using namespace std;

// 1차 복습 풀이시간 : 13분 30초 내 (체크 누락 / 복습 필요)

/*

<65. 미로탐색(2차원 DFS)>

7*7 격자판 미로를 탈출하는 경로의 가지수를 출력하는 프로그램을 작성하세요. 

출발점은 격자의 (1, 1) 좌표이고, 탈출 도착점은 (7, 7)좌표이다. 
격자판의 1은 벽이고, 0은 통로이다. 
격자판의 움직임은 상하좌우로만 움직인다. 

미로가 다음과 같다면

출발	0	0	0	0	0	0
0	1	1	1	1	1	0
0	0	0	1	0	0	0
1	1	0	1	0	1	1
1	1	0	0	0	0	1
1	1	0	1	1	0	0
1	0	0	0	0	0 도착

위의 지도에서 출발점에서 도착점까지 갈 수 있는 방법의 수는 8가지이다.

=============================================================================

▶ 입력설명
첫 번째 줄부터 7*7 격자의 정보가 주어집니다.

▶ 출력설명
첫 번째 줄에 경로의 가지수를 출력한다.

=============================================================================

▶ 입력예제
0 0 0 0 0 0 0
0 1 1 1 1 1 0
0 0 0 1 0 0 0
1 1 0 1 0 1 1
1 1 0 0 0 0 1
1 1 0 1 1 0 0
1 0 0 0 0 0 0

▶ 출력예제
8

*/

int maze[8][8]{ 0 }, ch[8][8]{ 0 };
int dx[4]{ -1, 0, 1, 0 }, dy[4]{ 0, 1, 0, -1 };
int res = 0;

/*
void DFS(int h, int w)
{
	int x, y;

	if (h == 7 && w == 7)
	{
		res++;
	}
	else
	{
		for (int i = 0; i < 4; i++)
		{
			x = h + dx[i];
			y = w + dy[i];

			if (x < 1 || x > 7 || y < 1 || y > 7) continue;

			if (maze[x][y] == 0 && ch[x][y] == 0)
			{
				ch[x][y] = 1;
				DFS(x, y);
				ch[x][y] = 0;
			}
		}
	}
}
*/

void DFS(int h, int w)
{
	int x, y;

	if (h == 7 && w == 7)
	{
		res++;
	}
	else
	{
		for (int i = 0; i < 4; i++)
		{
			x = h + dx[i];
			y = w + dy[i];

			if (x < 1 || x > 7 || y < 1 || y > 7 ||
				maze[x][y] != 0 || ch[x][y] != 0) continue;

			ch[x][y] = 1;
			DFS(x, y);
			ch[x][y] = 0;
		}
	}
}

int main()
{
	// 강의 풀이 

	for (int i = 1; i <= 7; i++)
	{
		for (int j = 1; j <= 7; j++)
		{
			cin >> maze[i][j];
		}
	}

	ch[1][1] = 1;
	DFS(1, 1);

	cout << res << endl; 

	return 0;
}